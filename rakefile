require 'rubygems'    

Gem::Specification::find_by_name('bundler') or raise "bundler is required to help manage dependencies - run 'gem install bundler'"
require 'bundler'

system "bundle install --system" unless `bundle check`.match(/The Gemfile's dependencies are satisfied/)

require 'albacore'
require 'rake/clean'
require 'xmlsimple' # might use this later - to manipulate config files?
require 'zip/zip'
require 'cucumber/rake/task'

include FileUtils

# include our custom albacore tasks (if any)
FileList["./Tools/albacore/**/*.rb"].each { |f| require f }

source_root      = "./src"
test_root        = "./test"
lib_root         = "./packages"
$packages_root   = "./packages"
tools_root       = "./tools"

build_root       = "./build" # used as a pre-deployment staging folder
temp_build_root  = "./temp" # used for integration testing

nuserve_exe      = "#{build_root}/nuserve.exe"

solution_file    = FileList["./**/*.sln"].first
commit           = Git.open(".").log.first.sha[0..10] rescue 'na'
version          = "0.0.1"
msbuild_exe      = File.join(ENV['windir'], 'Microsoft.NET','Framework',  'v4.0.30319', 'MSBuild.exe')

CLEAN.include("#{source_root}/**/bin", "#{source_root}/**/obj", "#{test_root}/**/obj", "#{test_root}/**/bin", build_root, temp_build_root)

CLOBBER.include("./**/_*", "./**/*.user", "./**/*.cache", "./**/*.suo", "TestResult.xml", "#{$packages_root}")

# ---------------------------------------------------------------------------------------------------------
# and so begin the build script tasks/targets

desc 'Default: clean and (re)build the solution'
task :default => ["clean", "build:all", "test:all", "build:deploy"]

# ---------------------------------------------

task :install => ["install:simple", "start"]

namespace :install do
	task :simple do
		put_banner "installing nuserve from #{build_root}"
		system "#{nuserve_exe} install"

		Rake::Task["start"].invoke
	end
	
	task :new => ["default", "install:simple"]
end

task :start do
	put_banner "starting nuserve from #{build_root}"
	system "#{nuserve_exe} start"
end

task :stop do
	put_banner "stopping nuserve from #{build_root}"
	system "#{nuserve_exe} stop"
end

task :uninstall do
	put_banner "uninstalling nuserve from #{build_root}"
	system "#{nuserve_exe} uninstall"
end

# ---------------------------------------------

desc 'Setup requirements to build and deploy'
task :setup => ["setup:dep"]

def setup_os(target = nil, folders_to_setup = nil)
	target ||= File.exist?('c:\Program Files (x86)') ? 64 : 32
	abort "no folders to set up!" if folders_to_setup.nil?
	puts "**** Setting up OS #{target} bits"
	folders_to_setup.each { |folder_path| 
		pattern = "#{folder_path}/{x,}#{target}/*.*"
		#puts "**** looking in: #{pattern}"
		files = FileList["#{pattern}"].each { |f|
			puts "**** Using #{f}"
			FileUtils.cp(f, folder_path)
		}
	}
end

namespace :setup do

	task :dep => ["setup:dep:packages", "setup:dep:os"]

	namespace :dep do

		desc "Setup dependencies for nuget packages"
		task :packages do
			FileList["**/packages.config"].each do |file|
				sh "nuget install #{file} /OutputDirectory #{$packages_root}"
			end
		end
	
		desc "Setup dependencies for this OS (x86/x64)"
		task :os do
			folders = []
			`find #{$packages_root} -name 'binaries'`.each_line {|f| folders.push f.strip}
			setup_os(nil,folders) 
		end
	end
end

	def package_tool(package, tool)
		package_folder_root = File.join($packages_root,"#{package}.*")
		target_folder = Dir.glob(package_folder_root).sort.last
		File.join(target_folder, "tools", tool) rescue puts "cannot find #{target_folder}; run 'rake setup' to ensure all dependencies are satisfied."
	end

Albacore.configure do |config|

	Rake::Task["setup"].invoke unless File.exists? $packages_root

	config.log_level = :verbose

	config.mspec.command = package_tool("Machine.Specifications", "mspec-x86-clr4.exe") 
end

# ---------------------------------------------

desc "Build the project"
task :build => ["build:all"]

namespace :build do

	msbuild :all, [:config] => [:setup] do |msb, args|
		configuration = :Debug

		if args[:config] != nil && args[:config] != 'local' then
			configuration = args[:config]
		end

		msb.properties :configuration => configuration
		msb.targets :Clean, :Build
		msb.solution = solution_file
	end

	desc "Rebuild the project"
	task :re => ["clean", "build:all"]

	task :deploy, [:config] do |task, args|
		Rake::Task["build:all"].invoke(args.config)

		put_banner "deploying to #{build_root}"

		# resolve config
		configuration = :Debug
		if args[:config] != nil && args[:config] != 'local' then
			configuration = args[:config] 
		end

		rm_rf build_root
		mkdir_p build_root
		FileList["#{source_root}/nuserve/bin/#{configuration}/*.*"].each do |f|
			puts "- #{f}"
			cp f,build_root
		end
	end
end


# ---------------------------------------------

desc "Run unit tests"
task :test => ["clean", "build:all", "test:unit"]

desc "Run integration tests"
task :integration => ["clean", "build:all", "test:integration"]

desc "Run acceptance tests (scripted features)"
task :features, [:tag] do |t, args|
	Rake::Task["test:features"].invoke(args.tag)
end  

namespace :test do
	addin = ENV['teamcity.dotnet.nunitaddin']
	addin = "#{addin}-2.5.5.dll" if addin
	
	desc 'Run all tests (unit & acceptance)'
	task :all, [:tag, :config] do |t, args|
		Rake::Task["test:unit"].invoke(args[:config])
		Rake::Task["test:integration"].invoke(args[:config])
		Rake::Task["test:features"].invoke(args[:tag],args[:config])
	end

	desc 'Verify unit specs'
	mspec :unit, [:config] do |mspec, args|
		Rake::Task["build:all"].invoke(args[:config])
		
		configuration = :Debug
		if args[:config] != nil && args[:config] != 'local' then
			configuration = args[:config]
		end

		include_pattern = "#{test_root}/**/bin/#{configuration}/*.[Ss]pecs.dll"
		exclude_pattern = "#{test_root}/**/bin/#{configuration}/*.[Ii]ntegration.[Ss]pecs.dll"

		put_banner "verifying: +[#{include_pattern}] -[#{exclude_pattern}]"

		mspec.assemblies = FileList[include_pattern].exclude(exclude_pattern)
	end

	desc 'Verify integration specs'
	mspec :integration, [:config] do |mspec, args|
		Rake::Task["build:all"].invoke(args[:config])
		
		# resolve config
		configuration = :Debug
		if args[:config] != nil && args[:config] != 'local' then
			configuration = args[:config]
		end

		include_pattern = "#{test_root}/**/bin/#{configuration}/*.Integration.Specs.dll"

		put_banner "verifying: +[#{include_pattern}]"

		mspec.assemblies FileList[include_pattern]
	end

	desc 'Verify features'
	task :features, [:config, :tag] do | task, args | 
		Rake::Task["test:deploy"].invoke(args.config)
		
		put_banner "verifying features in #{temp_build_root}" if args.tag.nil?
		put_banner "verifying #{args.tag} features in #{temp_build_root}" unless args.tag.nil?

		Rake::Task["test:run_features"].invoke(args.config)
	end

	Cucumber::Rake::Task.new(:run_features) do |task|
		task.cucumber_opts = ['features']
	end

	Cucumber::Rake::Task.new(:run_wip_features) do |task|
		task.cucumber_opts = ['-t', '@wip', 'features']
	end

	task :deploy, [:config] do |task, args|

		Rake::Task["build:all"].invoke(args.config)

		put_banner "deploying to #{temp_build_root}"

		# resolve config
		configuration = :Debug
		if args[:config] != nil && args[:config] != 'local' then
			configuration = args[:config] 
		end

		rm_rf temp_build_root
		mkdir_p temp_build_root
		FileList["#{source_root}/nuserve/bin/#{configuration}/*.*"].each do |f|
			puts "- #{f}"
			cp f,temp_build_root
		end
	end
end


# ---------------------------------------------

namespace :util do

	task :signals do
		Signal.list.each do |s|
			puts s
		end
	end

	task :rm_orig do
		FileList["./**/*.orig"].each { |f| rm f }
	end
end

# ---------------------------------------------

def put_banner(text)
	puts
	puts "-------------------------------------------------------------"
	puts text
	puts "-------------------------------------------------------------"
	puts
end

def resolve_profile(profileName)
	profile = $deployment_profiles["#{profileName}"]

	if profile.nil? then
		puts
		puts "don't recognize profile '#{profileName}'; using 'local'"
		puts
		profileName = 'local'
		profile = $deployment_profiles["#{profileName}"]
	end

	profile.merge!( :name => profileName )
	return profile
end

def svn_version
	version_range = `./tools/svn/svnversion`.match('(\d+)(?::(\d+))?') rescue [-1]
	version_range[2] || version_range[1] || ENV["BUILD_VCS_NUMBER"]
end

def windows_path_for(bash_path)
	"#{bash_path}".gsub('/', '\\')
end

def windows_path_with_trailing_slash_for(bash_path)
	"#{bash_path}//".gsub('/', '\\')
end
